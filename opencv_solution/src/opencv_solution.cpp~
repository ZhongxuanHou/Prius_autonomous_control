#include "ros/ros.h"
#include "opencv2/highgui/highgui.hpp"
#include <image_transport/image_transport.h>
#include "cv_bridge/cv_bridge.h"
#include "opencv2/objdetect/objdetect.hpp"
#include "vision_msgs/Detection2DArray.h"

using namespace cv;
using namespace cv_bridge;
using namespace std;

image_transport::Publisher imagePublisher;
ros::Publisher detectionPublisher;

HOGDescriptor hog;

void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
	vector<Rect> found;
	vision_msgs::Detection2DArray detectionMsg;
	detectionMsg.header = msg->header;
	CvImagePtr cv_ptr;

    	try
    	{
		cv_ptr = toCvCopy(msg,sensor_msgs::image_encodings::BGR8);
	}
    	catch (cv_bridge::Exception& e)
    	{
        	ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg->encoding.c_str());
		return;
    	}
		
        Mat mat_image = cv_ptr->image;
        hog.detectMultiScale(mat_image,found,0,Size(8,8));

        for (int i = 0; i<found.size();i++)
        {
            Rect r = found[i];
            rectangle(mat_image,r.tl(),r.br(),Scalar(0,255,0),2);
            vision_msgs::Detection2D detection;
            detection.bbox.size_x = r.width;
            detection.bbox.size_y = r.height;
            detection.bbox.center.x = r.x;
            detection.bbox.center.y = r.y;
            detectionMsg.detections.push_back(detection);

        }
        sensor_msgs::ImagePtr outMsgVisual = CvImage(std_msgs::Header(), "bgr8",mat_image).toImageMsg();

        imagePublisher.publish(outMsgVisual);
        detectionPublisher.publish(detectionMsg);

}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "image_listener");
    ros::NodeHandle nh;
    image_transport::ImageTransport it(nh);
    image_transport::Subscriber sub = it.subscribe("/prius/front_camera/image_raw",1,imageCallback);
    imagePublisher = it.advertise("/opencv_solution_node/visual",1000);
    detectionPublisher = nh.advertise<vision_msgs::Detection2DArray>("/opencv_solution_node/detections",1000);

	hog.setSVMDetector(HOGDescriptor::getDefaultPeopleDetector());
        
    ros::spin();
}
